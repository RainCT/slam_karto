#!/usr/bin/env python

PACKAGE='pal_karto'

import sys
from math import pi

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("range_threshold", double_t, 0, "Range threshold", 49, 5, 100)
gen.add("use_scan_matching", bool_t, 0, "When set to true, the mapper will use a scan matching algorithm", True )
gen.add("use_scan_barycenter", bool_t, 0, "Default value is true", True )
gen.add("minimum_travel_distance", double_t, 0, "Sets the minimum travel between scans. Generally it is a good idea to only process scans if the robot has moved a reasonable amount",0.2, 0.01, 2)
gen.add("minimum_travel_heading", double_t, 0, "Sets the minimum heading change between scans. Generally it is a good idea to only process scans if the robot has moved a reasonable amount",pi/18.0, 0.0001, pi*0.25,)
gen.add("scan_buffer_size", int_t, 0, " Scan buffer size is the length of the scan chain stored for scan matching. should be set to approximately scanBufferMaximumScanDistance / minimumTravelDistance",80,40,200)
gen.add("scan_buffer_maximum_scan_distance", double_t, 0, "Scan buffer maximum scan distance is the maximum distance between the first and last scans in the scan chain stored for matching",20, 10, 200)
gen.add("link_match_minimum_response_fine", double_t, 0, "Scans are linked only if the correlation response value is greater than this value",0.8,0.1,1.0)
gen.add("link_scan_maximum_distance", double_t, 0,"Maximum distance between linked scans. Scans that are farther apart will not be linked regardless of the correlation response value",10.0,4.0,50.0)
gen.add("loop_search_maximum_distance",double_t, 0,"Scans less than this distance from the current position will be considered for a match in loop closure",10.0, 4.0, 30.0)
gen.add("loop_match_minimum_chain_size", int_t, 0, "When the loop closure detection finds a candidate it must be part of a large set of linked scans. If the chain of scans is less than this value we do not attempt to close the loop",10,0,20)
gen.add("loop_match_maximum_variance_coarse",double_t,0, "The co-variance values for a possible loop closure have to be less than this value to consider a viable solution. This applies to the coarse search",0.16,0.01,10.0)
gen.add("loop_match_minimum_response_coarse",double_t,0, "If response is larger then this, then initiate loop closure search at the coarse resolution",0.8,0.01, 1.0)
gen.add("loop_match_minimum_response_fine",double_t,0, "If response is larger then this, then initiate loop closure search at the fine response",0.8,0.01, 1.0)

# CorrelationParameters correlationParameters;
gen.add("correlation_search_space_dimension",double_t,0, "The size of the search grid used by the matcher",0.3,0.1, 1)
gen.add("correlation_search_space_resolution",double_t,0, "The resolution (size of a grid cell) of the correlation grid",0.01,0.009, 0.5)
gen.add("correlation_search_space_smear_deviation",double_t,0,"The point readings are smeared by this value in X and Y to create a smoother response",0.03,0.01, 0.5)

# CorrelationParameters loopCorrelationParameters;
gen.add("loop_search_space_dimension",double_t,0,"The size of the search space to look for loop closure",8, 5, 30)
gen.add("loop_search_space_resolution",double_t,0,"The resolution (size of a grid cell) of the search space for loop closure",0.05,0.01, 0.5)
gen.add("loop_search_space_smear_deviation",double_t,0,"The point readings are smeared by this value in X and Y to create a smoother response",0.03,0.01, 0.5)

# ScanMatcherParameters;
gen.add("distance_variance_penalty", double_t,0,"Variance of penalty for deviating from odometry when scan-matching",0.3,0.01,1)
gen.add("angle_variance_penalty", double_t,0,"Variance of penalty for deviating from odometry when scan-matching",0.121839781, 0.01, 1)
gen.add("fine_search_angle_offset", double_t, 0, "The range of angles to search during a coarse search and a finer search", 0.2*pi/180.0, 0.001, 0.1)
gen.add("coarse_search_angle_offset", double_t, 0, "The range of angles to search during a coarse search and a finer search", 20.0*pi/180.0, 0.01, 1.0)
gen.add("coarse_angle_resolution", double_t, 0, " Resolution of angles to search during a coarse search", 2.0*pi/180.0, 0.01,0.1)
gen.add("minimum_angle_penalty", double_t,0, "Minimum value of the penalty multiplier so scores do not become too small", 0.9,0.01,2.0)
gen.add("minimum_distance_penalty", double_t,0, "Minimum value of the penalty multiplier so scores do not become too small",0.5,0.01, 2.0)
gen.add("use_response_expansion", bool_t, 0, "Whether to increase the search space if no good matches are initially found", False)

gen.add("restore_defaults",  bool_t, 0, "Retore to the default configuration", False)

exit(gen.generate(PACKAGE, "pal_karto", "Karto"))
